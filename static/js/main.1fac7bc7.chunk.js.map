{"version":3,"sources":["components/Header.js","components/Body.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","value","setValue","className","Button","variant","color","onClick","clone","subtract","format","add","Body","calendar","setCalendar","startDay","startOf","endDay","endOf","useEffect","day","temporary","isBefore","push","Array","fill","map","weekDay","moment","weekdaysShort","dayStyle","beforeToday","isSame","isSelected","Date","isToday","classes","makeStyles","root","minWidth","marginTop","marginBottom","useStyles","Card","CardContent","TableContainer","component","Paper","Table","size","TableHead","TableRow","weekdays","TableCell","key","TableBody","week","Footer","listMonth","months","onChange","e","newMonth","set","target","preventDefault","yearChange","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fac7bc7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\n\r\nfunction Header({value, setValue}) {\r\n\r\n    // fungsi Bulan Selanjutnya\r\n    const nextMonth = () =>{\r\n        // setCurrentDate(moment(currentDate).add(1,'M'));\r\n        return value.clone().add(1,\"M\");\r\n    }\r\n    \r\n    // fungsi Bulan Sebelumnya\r\n    const prevMonth = () =>{\r\n        // setCurrentDate(moment(currentDate).subtract(1,'M'));\r\n        return value.clone().subtract(1,\"M\");\r\n    }\r\n\r\n    // Bulan Saat ini\r\n    const currentMonth = () =>{\r\n        return value.format(\"MMMM\");\r\n    }\r\n    \r\n    // Tahun Saat ini\r\n    const currentYear = () =>{\r\n        return value.format(\"YYYY\");\r\n    }\r\n    \r\n    return (\r\n        <div className=\"header-cal\">\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setValue(prevMonth())}>Prev</Button>\r\n            <p className=\"title-cal\">{currentMonth()} {currentYear()}</p>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={() => setValue(nextMonth())}>Next</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, {useEffect} from 'react';\r\nimport moment from 'moment';\r\nimport { Card, CardContent, Table, TableHead, TableBody,TableRow, TableCell } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nfunction Body({calendar, setCalendar, value, setValue}) {\r\n    // Variabel Hari Pertama dan Hari terakhir Di bulan saat ini\r\n    const startDay = value.clone().startOf('month').startOf('week');\r\n    const endDay = value.clone().endOf('month').endOf('week');\r\n    \r\n    // Load Data Untuk Menghindari re-render ( karena ini merender tanggal )\r\n    useEffect(() => {\r\n        const day = startDay.clone().subtract(1,\"day\");\r\n        // temporary variable\r\n        // Untuk ngambil tanggal tiap baris / cell\r\n        const temporary = [];\r\n        while(day.isBefore(endDay, \"day\")){\r\n        temporary.push(\r\n            Array(7)\r\n            .fill()\r\n            .map(()=>day.add(1,\"day\").clone())\r\n        );\r\n        }\r\n        setCalendar(temporary);\r\n    }, [value]);\r\n\r\n    // Pemanggilan Hari\r\n    let weekDay = moment.weekdaysShort();\r\n\r\n    // Styleing Tanggal\r\n    const isSelected = (day, value) =>{\r\n        return value.isSame(day, \"day\");\r\n    }\r\n    const beforeToday = (day, value) =>{\r\n        return day.isBefore(day, \"day\");\r\n    }\r\n    const isToday = (day) =>{\r\n        return day.isSame(new Date(), \"day\");\r\n    }\r\n\r\n    const dayStyle = (day, value) =>{\r\n        if(beforeToday(day, value)) return \"before\"\r\n        if(isSelected(day, value)) return \"selected\"\r\n        if(isToday(day)) return \"today\"\r\n        return \"\"\r\n    }\r\n\r\n    // Styleing Root (Card)\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginTop: 10,\r\n            marginBottom: 10,\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root} variant=\"outlined\">\r\n            <CardContent>\r\n                <TableContainer component={Paper}>\r\n                    <Table size=\"small\" className=\"body-cal\">\r\n                        <TableHead className=\"hari\">\r\n                            <TableRow>\r\n                                {\r\n                                    weekDay.map((weekdays) => (\r\n                                        <TableCell className={weekdays} key={weekdays}>{weekdays}</TableCell>\r\n                                    ))\r\n                                } \r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody className=\"tanggal\">\r\n                            {\r\n                                calendar.map((week) => (\r\n                                <TableRow>\r\n                                    {\r\n                                    week.map((day) => (\r\n                                        <TableCell onClick={() => setValue(day)} className={\"day_\" + dayStyle(day,value)}>{day.format(\"D\")}</TableCell>\r\n                                    ))\r\n                                    }\r\n                                </TableRow>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nfunction Footer({value , setValue}) {\r\n\r\n    // List Bulan\r\n    let listMonth = moment.months();\r\n\r\n    // bulan Saat ini\r\n    const currentMonth = () =>{\r\n        return value.format(\"MMMM\");\r\n    }\r\n    \r\n    // tahun Saat ini\r\n    const currentYear = () =>{\r\n        return value.format(\"YYYY\");\r\n    }\r\n    \r\n    // fungsi Handle Setiap Bulan Berubah\r\n    const handleChangeMonth = (e) => {\r\n        // return (value.set('month', e.target.value));\r\n        const newMonth = value.clone().set('month',e.target.value);\r\n        setValue(newMonth);\r\n        e.preventDefault();\r\n    }\r\n    \r\n    // Fungsi Handle Setiap Tahun Berubah\r\n    const handleChangeYear = (e) => {\r\n        const yearChange = value.clone().set('year', e.target.value);\r\n        setValue(yearChange);\r\n        e.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form className=\"input-cal\">\r\n            <label>Jump To: </label>\r\n            <select className=\"month\" value={currentMonth()} onChange={handleChangeMonth}>\r\n            {\r\n                listMonth.map((months) =>(\r\n                <option key={months}>{months}</option>\r\n                ))\r\n            }\r\n            </select>\r\n\r\n            <select className=\"year\" value={currentYear()} onChange={handleChangeYear}>\r\n                <option value=\"2010\">2010</option>\r\n                <option value=\"2011\">2011</option>\r\n                <option value=\"2012\">2012</option>\r\n                <option value=\"2013\">2013</option>\r\n                <option value=\"2014\">2014</option>\r\n                <option value=\"2015\">2015</option>\r\n                <option value=\"2016\">2016</option>\r\n                <option value=\"2017\">2017</option>\r\n                <option value=\"2018\">2018</option>\r\n                <option value=\"2019\">2019</option>\r\n                <option value=\"2020\">2020</option>\r\n                <option value=\"2021\">2021</option>\r\n                <option value=\"2022\">2022</option>\r\n                <option value=\"2023\">2023</option>\r\n                <option value=\"2024\">2024</option>\r\n                <option value=\"2025\">2025</option>\r\n            </select>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, {useState} from 'react';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport Footer from './components/Footer';\nimport moment from 'moment';\nimport './App.css';\n\nfunction App() {\n\n  //! Statenya\n  // const [currentDate, setCurrentDate] = useState(new Date());\n  // const [selectedDate, setSelectedDate] = useState(new Date());\n  // const dateFormat = \"MMMM YYYY\"\n\n  // Matrik Calendar \n  const [calendar, setCalendar] = useState([]);\n  // Value / Isi Calendar\n  const [value, setValue] = useState(moment());\n\n  // const startDay = value.clone().startOf('month').startOf('week');\n  // const endDay = value.clone().endOf('month').endOf('week');\n  \n  // useEffect(() => {\n  //   const day = startDay.clone().subtract(1,\"day\");\n  //   // temporary variable\n  //   const temporary = [];\n  //   while(day.isBefore(endDay, \"day\")){\n  //     temporary.push(\n  //       Array(7)\n  //       .fill()\n  //       .map(()=>day.add(1,\"day\").clone())\n  //     );\n  //   }\n  //   setCalendar(temporary);\n  // }, [value]);\n\n  // * nampilin Hari\n  // const bulan = ['Sun', 'Mon', 'Tue'];\n  // let weekDay = moment.weekdaysShort();\n  // let listMonth = moment.months();\n\n\n  //* Function\n  // const nextMonth = () =>{\n  //   // setCurrentDate(moment(currentDate).add(1,'M'));\n  //   return value.clone().add(1,\"M\");\n  // }\n  // const prevMonth = () =>{\n  //   // setCurrentDate(moment(currentDate).subtract(1,'M'));\n  //   return value.clone().subtract(1,\"M\");\n  // }\n\n  // const currentMonth = () =>{\n  //   return value.format(\"MMMM\");\n  // }\n\n  // const currentYear = () =>{\n  //   return value.format(\"YYYY\");\n  // }\n\n  // const handleChangeMonth = (e) => {\n  //   // return (value.set('month', e.target.value));\n  //   const newMonth = value.clone().set('month',e.target.value);\n  //   setValue(newMonth);\n  //   e.preventDefault();\n  // }\n\n  // const handleChangeYear = (e) => {\n  //   const yearChange = value.clone().set('year', e.target.value);\n  //   setValue(yearChange);\n  //   e.preventDefault();\n  // }\n\n  // const isSelected = (day, value) =>{\n  //   return value.isSame(day,\"day\");\n  // }\n  // const beforeToday = (day) =>{\n  //   return day.isBefore(new Date(), \"day\");\n  // }\n  // const isToday = (day) =>{\n  //   return day.isSame(new Date(), \"day\");\n  // }\n\n  // const dayStyle = (day, value) =>{\n  //   if(beforeToday(day)) return \"before\"\n  //   if(isSelected(day, value)) return \"selected\"\n  //   if(isToday(day)) return \"today\"\n  //   return \"\"\n  // }\n\n  return (\n    <div className=\"App\">\n\n{/* head calendar */}\n      <Header value={value} setValue={setValue} />\n      {/* <div className=\"header-cal\">\n        <button onClick={() => setValue(prevMonth)}>Prev</button>\n          <p className=\"title-cal\">{currentMonth()} {currentYear()}</p>\n        <button onClick={() => setValue(nextMonth)}>Next</button>\n      </div> */}\n\n{/* hari dan tanggal */}\n      <Body calendar={calendar} setCalendar={setCalendar} value={value} setValue={setValue} />\n      {/* <table className=\"body-cal\">\n        <thead className=\"hari\">\n        {\n          weekDay.map((weekdays) => (\n            <th className={weekdays} key={weekdays}>{weekdays}</th>\n          ))\n        } \n        </thead>\n        <tbody className=\"tanggal\">\n          {\n            calendar.map((week) => (\n              <tr>\n                {\n                  week.map((day) => (\n                    <td onClick={() => setValue(day)} className={\"day_\" + dayStyle(day,value)}>{day.format(\"D\")}</td>\n                  ))\n                }\n              </tr>\n            ))\n          }\n        </tbody>\n      </table> */}\n\n      {/* isi calendar */}\n      {/* <div className=\"calendar\">\n        {\n          calendar.map((week) => <div>\n            {\n              week.map((day)=> (\n              <div className=\"day\" onClick={()=> setValue(day)}>\n                <div className={dayStyle(day, value)}>{day.format(\"D\")}</div>\n              </div>\n              ))\n            }\n          </div>)\n        }\n      </div> */}\n\n    {/* Input */}\n    <Footer value={value} setValue={setValue} />\n      {/* <form className=\"input-cal\">\n        <label>Jump To: </label>\n        <select className=\"month\" value={currentMonth()} onChange={handleChangeMonth}>\n          {\n            listMonth.map((months) =>(\n              <option key={months}>{months}</option>\n            ))\n          }\n        </select>\n        <select className=\"year\" value={currentYear()} onChange={handleChangeYear}>\n          <option value=\"2010\">2010</option>\n          <option value=\"2011\">2011</option>\n          <option value=\"2012\">2012</option>\n          <option value=\"2013\">2013</option>\n          <option value=\"2014\">2014</option>\n          <option value=\"2015\">2015</option>\n          <option value=\"2016\">2016</option>\n          <option value=\"2017\">2017</option>\n          <option value=\"2018\">2018</option>\n          <option value=\"2019\">2019</option>\n          <option value=\"2020\">2020</option>\n        </select>\n      </form> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}